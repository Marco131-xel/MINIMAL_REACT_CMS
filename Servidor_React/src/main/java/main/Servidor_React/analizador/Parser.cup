package main.Servidor_React.analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import main.Servidor_React.abstracto.*;
import main.Servidor_React.excepciones.*;
import main.Servidor_React.ast.*;
import main.Servidor_React.operadores.*;
import main.Servidor_React.sentencias.*;
import main.Servidor_React.function.*;

// CODIGO USUARIO
parser code {:
    Lexer s;
    parser(Lexer s) {
        this.s =s;
        this.listaErrores = s.listaErrores;
    }

    public LinkedList<Errores> listaErrores = new LinkedList<>();

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico detectado: " + s.value + " en linea " + s.left + " columna " + s.right);
        listaErrores.add(new Errores("SINTACTICO",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        System.out.println("Error no recuperable: " + s.value + " en linea " + s.left + " columna " + s.right);
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }
:};

action code {::};

// TERMINALES
terminal INCRE, DECRE;
terminal POT, MAS, MENOS, POR, DIV, UMENOS;
terminal PAR1, PAR2, IGUAL, MENOR, MAYOR, EQUALS;
terminal OR, AND, DIFER, NOT, FINCADENA;
terminal LLAVE1, LLAVE2, DOSPTS, COMA, PUNTO;
terminal CONST, RETURN, NUMBER, STRING, CHAR, BREAK;
terminal BOOLEAN, VOID, VAR, CONSOLE, LOG;
terminal FUNCTION, IF, ELSE, FOR, TRUE, FALSE;
terminal String ENTERO, DECIMAL, IDENTIFICADOR, CADENA, CARACTER;
// NO TERMINALES
non terminal LinkedList<Instruccion>INICIO, INSTRUCCIONES;
non terminal Instruccion INSTRUCCION;
non terminal Instruccion IMPRESION, DECLARACION, ASIGNACION;
non terminal Instruccion SIF, BREAKK, RETU;
non terminal Instruccion EXPRESION;
non terminal Instruccion CFOR;
non terminal Instruccion FUNCION, LLAMADA_FUNCION;
non terminal LinkedList<Parametro> PARAMETROS;
non terminal Parametro PARAMETRO;
non terminal Tipo TIPOS;
// PRECEDENCIA
precedence left AND, OR, DIFER;
precedence left MENOR, MAYOR;
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence right POT;
precedence left UMENOS;
precedence left EQUALS;
precedence left NOT;

// PRODUCCIONES Y GRAMATICAS
start with INICIO;

INICIO ::= INSTRUCCIONES:a {: RESULT = a; :};

INSTRUCCIONES ::= INSTRUCCION:a                 {: RESULT = new LinkedList<>(); RESULT.add(a); :}
                | INSTRUCCIONES:a INSTRUCCION:b {: RESULT = a; RESULT.add(b); :}
;

INSTRUCCION ::= IMPRESION:a {: RESULT = a; :}
              | DECLARACION:a {: RESULT = a; :}
              | ASIGNACION:a {: RESULT = a; :}
              | SIF:a {: RESULT = a; :}
              | BREAKK:a {: RESULT = a; :}
              | RETU:a {: RESULT = a; :}
              | CFOR:a {: RESULT = a; :}
              | FUNCION:a {: RESULT = a; :}
              | LLAMADA_FUNCION:a {: RESULT = a; :}
              | error
;

IMPRESION ::= CONSOLE PUNTO LOG PAR1 EXPRESION:a PAR2 FINCADENA {: RESULT = new Console(a, aleft, aright); :}
;

DECLARACION ::= VAR IDENTIFICADOR:b DOSPTS TIPOS:a IGUAL EXPRESION:c FINCADENA{: RESULT = new Declaracion(b, c, a, aleft, aright); :}
;

ASIGNACION ::= IDENTIFICADOR:a IGUAL EXPRESION:b FINCADENA {: RESULT=new Asignacion(a, b, aleft, aright); :}
             | IDENTIFICADOR:a INCRE {: RESULT = new Incremento(a, aleft, aright); :}
             | IDENTIFICADOR:a INCRE FINCADENA {: RESULT = new Incremento(a, aleft, aright); :}
             | IDENTIFICADOR:a DECRE {: RESULT = new Decremento(a, aleft, aright); :}
             | IDENTIFICADOR:a DECRE FINCADENA {: RESULT = new Decremento(a, aleft, aright); :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 {: RESULT = new If(a, b, null, null, aleft, aright); :}
      | IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE SIF:c {: RESULT = new If(a, b, (If)c, null, aleft, aright); :}
      | IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE LLAVE1 INSTRUCCIONES:c LLAVE2 {: RESULT = new If(a, b, null, c, aleft, aright); :}
;

BREAKK ::= BREAK:a FINCADENA {: RESULT = new Break(aleft, aright); :}
;

RETU ::= RETURN:a EXPRESION:b FINCADENA {: RESULT = new Return(b, aleft, aright); :}
;

CFOR ::= FOR PAR1 DECLARACION:a EXPRESION:b FINCADENA ASIGNACION:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2 {: RESULT = new For(a, b, c, d, aleft, aright); :}
;

FUNCION ::= FUNCTION IDENTIFICADOR PAR1 PARAMETROS PAR2 DOSPTS TIPOS LLAVE1 INSTRUCCIONES LLAVE2
;

PARAMETROS ::= PARAMETRO:a {: RESULT = new LinkedList<>(); RESULT.add(a); :}
             | PARAMETROS:a COMA PARAMETRO:b {: RESULT = a; RESULT.add(b); :}
             | /* vacio */{: RESULT = new LinkedList<>(); :}
;

PARAMETRO ::= IDENTIFICADOR:a DOSPTS TIPOS:b {: RESULT = new Parametro(a, b); :}
;

LLAMADA_FUNCION ::= IDENTIFICADOR:a PAR1 PARAMETROS:b PAR2 FINCADENA {: RESULT = new LLamada(a, b, aleft, aright); :}
;

TIPOS ::= NUMBER {: RESULT = new Tipo(TipoDato.NUMERO); :}
        | STRING {: RESULT = new Tipo(TipoDato.CADENA); :}
        | CHAR {: RESULT = new Tipo(TipoDato.CARACTER); :}
        | BOOLEAN {: RESULT = new Tipo(TipoDato.BOOLEANO); :}
        | VOID {: RESULT = new Tipo(TipoDato.VOID); :}
;

EXPRESION ::= MENOS EXPRESION:a {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | DIFER EXPRESION:a             {:   RESULT = new Booleanos(a, OperadoresBooleanas.NOT, aleft, aright);  :} %prec NOT
            | EXPRESION:a MAS EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :}
            | EXPRESION:a POR EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a DIV EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a POT EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); :}
            | EXPRESION:a MENOR IGUAL EXPRESION:b {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright); :}%prec EQUALS
            | EXPRESION:a MAYOR IGUAL EXPRESION:b {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright); :}%prec EQUALS
            | EXPRESION:a MENOR EXPRESION:b     {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); :}
            | EXPRESION:a MAYOR EXPRESION:b     {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); :}
            | EXPRESION:a OR EXPRESION:b    {:  RESULT = new Booleanos(a, b, OperadoresBooleanas.OR, aleft, aright);  :}
            | EXPRESION:a AND EXPRESION:b   {:  RESULT = new Booleanos(a, b, OperadoresBooleanas.AND, aleft, aright);  :}
            | ENTERO:a          {: RESULT = new Nativo(Double.valueOf(a), new Tipo(TipoDato.NUMERO), aleft, aright ); :}
            | DECIMAL:a         {: RESULT = new Nativo(Double.valueOf(a), new Tipo(TipoDato.NUMERO), aleft, aright ); :}
            | CADENA:a          {: RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright ); :}
            | CARACTER:a          {: RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright ); :}
            | TRUE:a          {: RESULT = new Nativo(true, new Tipo(TipoDato.BOOLEANO), aleft, aright ); :}
            | FALSE:a          {: RESULT = new Nativo(false, new Tipo(TipoDato.BOOLEANO), aleft, aright ); :}
            | IDENTIFICADOR:a   {: RESULT = new Variable(a, aleft, aright); :}
            | PAR1 EXPRESION:a PAR2 {: RESULT = a; :}
;